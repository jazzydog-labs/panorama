#!/usr/bin/env python3
"""
Panorama Tmux Session Manager

Manages a tmux session that displays all foundry ecosystem repositories
in an organized grid layout for simultaneous monitoring and interaction.
"""

import argparse
import json
import os
import subprocess
import sys
import time
import yaml
from pathlib import Path
from typing import List, Dict, Any, Optional


class PanoramaSession:
    """Manages tmux sessions for panorama multi-repo view."""
    
    SESSION_NAME = "panorama"
    WINDOW_NAME = "repos"
    
    def __init__(self):
        self.repos = self._load_repos()
        self.session_exists = self._check_session_exists()
    
    def _load_repos(self) -> List[Dict[str, Any]]:
        """Load repository configuration from loom's repos.yaml."""
        # Try multiple possible locations
        possible_paths = [
            Path.home() / "dev/jazzydog-labs/foundry/loom/config/repos.yaml",
            Path.home() / "dev/foundry/loom/config/repos.yaml",
            Path(__file__).parent.parent / "config/repos.yaml",
        ]
        
        repos_path = None
        for path in possible_paths:
            if path.exists():
                repos_path = path
                break
        
        if not repos_path:
            print("Error: Could not find repos.yaml in any expected location")
            print("Searched in:")
            for path in possible_paths:
                print(f"  - {path}")
            sys.exit(1)
        
        try:
            with open(repos_path, 'r') as f:
                data = yaml.safe_load(f)
                return data.get('repos', [])
        except Exception as e:
            print(f"Error loading repos.yaml: {e}")
            sys.exit(1)
    
    def _check_session_exists(self) -> bool:
        """Check if the panorama tmux session exists."""
        try:
            result = subprocess.run(
                ['tmux', 'has-session', '-t', self.SESSION_NAME],
                capture_output=True
            )
            return result.returncode == 0
        except FileNotFoundError:
            print("Error: tmux is not installed or not in PATH")
            sys.exit(1)
    
    def _expand_path(self, path: str) -> Path:
        """Expand environment variables and resolve path."""
        # Common environment variables
        env_vars = {
            '$DEV_ROOT': os.environ.get('DEV_ROOT', str(Path.home() / 'dev')),
            '$FOUNDRY_DIR': os.environ.get('FOUNDRY_DIR', 'jazzydog-labs/foundry'),
        }
        
        # Replace environment variables
        expanded = path
        for var, value in env_vars.items():
            expanded = expanded.replace(var, value)
        
        return Path(expanded).expanduser().resolve()
    
    def _get_layout_dimensions(self, count: int) -> tuple[int, int]:
        """Calculate optimal grid dimensions for the given number of repos."""
        # For 12 repos, we'll use a 4x3 layout
        if count <= 4:
            return count, 1
        elif count <= 6:
            return 3, 2
        elif count <= 9:
            return 3, 3
        elif count <= 12:
            return 4, 3
        elif count <= 16:
            return 4, 4
        else:
            # For more repos, try to keep it somewhat square
            import math
            cols = math.ceil(math.sqrt(count))
            rows = math.ceil(count / cols)
            return cols, rows
    
    def create(self) -> None:
        """Create a new panorama tmux session with all repos."""
        if self.session_exists:
            print(f"Session '{self.SESSION_NAME}' already exists. Use 'pano refresh' to update.")
            return
        
        if not self.repos:
            print("Error: No repositories found in configuration")
            sys.exit(1)
        
        print(f"Creating panorama session with {len(self.repos)} repositories...")
        
        # Create the session with the first repo
        first_repo = self.repos[0]
        first_path = self._expand_path(first_repo['path'])
        
        # Create new detached session
        cmd = [
            'tmux', 'new-session', '-d', '-s', self.SESSION_NAME,
            '-n', self.WINDOW_NAME, '-c', str(first_path)
        ]
        
        try:
            subprocess.run(cmd, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error creating tmux session: {e}")
            sys.exit(1)
        
        # Create panes for remaining repos
        for i, repo in enumerate(self.repos[1:], start=1):
            repo_path = self._expand_path(repo['path'])
            
            # Check if directory exists
            if not repo_path.exists():
                print(f"Warning: Repository path does not exist: {repo_path}")
                repo_path = Path.home()  # Default to home if repo doesn't exist
            
            # Split the window
            # Alternate between horizontal and vertical splits for better layout
            split_type = '-h' if i % 2 == 1 else '-v'
            target_pane = f"{self.SESSION_NAME}:{self.WINDOW_NAME}.{i-1}"
            
            cmd = [
                'tmux', 'split-window', split_type, '-t', target_pane,
                '-c', str(repo_path)
            ]
            
            try:
                subprocess.run(cmd, check=True)
            except subprocess.CalledProcessError:
                # If splitting fails, try with the main window
                cmd = [
                    'tmux', 'split-window', split_type, 
                    '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}",
                    '-c', str(repo_path)
                ]
                try:
                    subprocess.run(cmd, check=True)
                except subprocess.CalledProcessError as e:
                    print(f"Warning: Could not create pane for {repo['name']}: {e}")
        
        # Apply tiled layout for even distribution
        cmd = ['tmux', 'select-layout', '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}", 'tiled']
        subprocess.run(cmd, check=True)
        
        # Enable pane titles
        cmd = ['tmux', 'set-option', '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}", 'pane-border-status', 'top']
        subprocess.run(cmd, check=True)
        
        cmd = ['tmux', 'set-option', '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}", 'pane-border-format', '#{pane_title}']
        subprocess.run(cmd, check=True)
        
        # Set pane titles showing repo name and current directory
        for i, repo in enumerate(self.repos):
            repo_path = self._expand_path(repo['path'])
            if repo_path.exists():
                pane_title = f"{repo['name']}:{repo_path}"
            else:
                pane_title = f"{repo['name']}:~"
            
            # Set the pane title
            cmd = [
                'tmux', 'select-pane', '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}.{i}",
                '-T', pane_title
            ]
            try:
                subprocess.run(cmd, check=True)
            except subprocess.CalledProcessError:
                pass
            
            # Send a command to show repo name and pwd
            cmd = [
                'tmux', 'send-keys', '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}.{i}",
                f"echo '=== {repo['name']} ===' && pwd", 'C-m'
            ]
            try:
                subprocess.run(cmd, check=True)
            except subprocess.CalledProcessError:
                pass
        
        print(f"✓ Created panorama session with {len(self.repos)} repositories")
        
        # Auto-collapse prompts for cleaner viewing
        print("Collapsing prompts for cleaner viewing...")
        time.sleep(1)  # Give panes time to initialize
        
        # Run prompt-collapse and clear as background shell command with delay
        script_path = os.path.abspath(__file__)
        cmd = f"sleep 1 && python {script_path} prompt-collapse && python {script_path} run clear"
        try:
            subprocess.Popen(cmd, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception:
            # Fallback to internal method if subprocess fails
            self._collapse_prompts_internal()
        
        print("Use 'pano' to attach to the session")
    
    def attach(self) -> None:
        """Attach to the panorama session."""
        if not self.session_exists:
            print("No panorama session found. Creating one...")
            self.create()
        
        # Attach to the session
        cmd = ['tmux', 'attach-session', '-t', self.SESSION_NAME]
        try:
            subprocess.run(cmd)
        except subprocess.CalledProcessError as e:
            print(f"Error attaching to session: {e}")
            sys.exit(1)
    
    def close(self) -> None:
        """Close (kill) the panorama session."""
        if not self.session_exists:
            print("No panorama session to close")
            return
        
        cmd = ['tmux', 'kill-session', '-t', self.SESSION_NAME]
        try:
            subprocess.run(cmd, check=True)
            print("✓ Closed panorama session")
        except subprocess.CalledProcessError as e:
            print(f"Error closing session: {e}")
            sys.exit(1)
    
    def status(self) -> None:
        """Show status of the panorama session."""
        if self.session_exists:
            print(f"✓ Panorama session '{self.SESSION_NAME}' is running")
            
            # Get list of panes
            cmd = ['tmux', 'list-panes', '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}", '-F', '#{pane_index}: #{pane_current_path}']
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                print(f"\nRepositories ({len(self.repos)}):")
                for line in result.stdout.strip().split('\n'):
                    print(f"  {line}")
            except subprocess.CalledProcessError:
                pass
        else:
            print(f"✗ No panorama session found")
            print(f"  Use 'pano' to create one")
    
    def refresh(self) -> None:
        """Refresh the panorama session with updated repo list."""
        print("Refreshing panorama session...")
        
        # Close existing session if it exists
        if self.session_exists:
            self.close()
            time.sleep(0.5)  # Give tmux time to clean up
        
        # Reload repos configuration
        self.repos = self._load_repos()
        
        # Update session existence status
        self.session_exists = self._check_session_exists()
        
        # Create new session
        self.create()
        print("✓ Panorama session refreshed")
    
    def run_command(self, command: str) -> None:
        """Run a command in all panes of the panorama session."""
        if not self.session_exists:
            print("✗ No panorama session found")
            print("  Use 'pano' to create one first")
            sys.exit(1)
        
        # Get the number of panes
        cmd = ['tmux', 'list-panes', '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}", '-F', '#{pane_index}']
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            pane_indices = result.stdout.strip().split('\n')
        except subprocess.CalledProcessError as e:
            print(f"Error listing panes: {e}")
            sys.exit(1)
        
        print(f"Running '{command}' in {len(pane_indices)} panes...")
        
        # Send the command to each pane
        for i, pane_index in enumerate(pane_indices):
            target = f"{self.SESSION_NAME}:{self.WINDOW_NAME}.{pane_index}"
            cmd = ['tmux', 'send-keys', '-t', target, command, 'C-m']
            
            try:
                subprocess.run(cmd, check=True)
                # Get repo name if possible
                repo_name = self.repos[i]['name'] if i < len(self.repos) else f"pane {pane_index}"
                print(f"  ✓ {repo_name}")
            except subprocess.CalledProcessError as e:
                print(f"  ✗ Failed to run in pane {pane_index}: {e}")
            except IndexError:
                print(f"  ✓ pane {pane_index}")
        
        print(f"\n✓ Command sent to all panes")
    
    def _collapse_prompts_internal(self) -> None:
        """Internal helper to collapse prompts without extra output messages."""
        if not self.session_exists:
            return
        
        # Get the current shell (bash, zsh, etc.)
        shell = os.environ.get('SHELL', '/bin/bash')
        
        if 'zsh' in shell:
            # For zsh, temporarily set PS1
            prompt_cmd = "export PS1='> '"
        elif 'bash' in shell:
            # For bash, temporarily set PS1
            prompt_cmd = "export PS1='> '"
        else:
            # Generic approach
            prompt_cmd = "export PS1='> '"
        
        # Get the number of panes
        cmd = ['tmux', 'list-panes', '-t', f"{self.SESSION_NAME}:{self.WINDOW_NAME}", '-F', '#{pane_index}']
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            pane_indices = result.stdout.strip().split('\n')
        except subprocess.CalledProcessError:
            return
        
        # Send the command to each pane
        for pane_index in pane_indices:
            target = f"{self.SESSION_NAME}:{self.WINDOW_NAME}.{pane_index}"
            cmd = ['tmux', 'send-keys', '-t', target, prompt_cmd, 'C-m']
            try:
                subprocess.run(cmd, check=True)
            except subprocess.CalledProcessError:
                pass
    
    def prompt_collapse(self) -> None:
        """Collapse prompts to a simple '>' in all panes."""
        if not self.session_exists:
            print("✗ No panorama session found")
            print("  Use 'pano' to create one first")
            sys.exit(1)
        
        print("Collapsing prompts in all panes...")
        self._collapse_prompts_internal()
        print("\n✓ Prompts collapsed to '>' in all panes")
        print("  Note: This change is temporary and will reset when you open a new shell")


def main():
    """Main entry point for pano command."""
    parser = argparse.ArgumentParser(
        description="Panorama Tmux Session Manager - View all repos at once",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Commands:
  pano                    Attach to panorama session (creates if needed, auto-collapses prompts)
  pano close              Close the panorama session
  pano status             Show session status
  pano refresh            Refresh session with updated repo list
  pano run <command>      Run a command in all panes
  pano prompt-collapse    Change all prompts to simple '>' (done automatically on create)
  
Examples:
  pano                    # Open panorama view
  pano close              # Close all panorama windows
  pano status             # Check if session is running
  pano run "git status"   # Run git status in all repos
  pano run "git pull"     # Pull updates in all repos
  pano prompt-collapse    # Simplify prompts for cleaner view
        """
    )
    
    parser.add_argument(
        'command',
        nargs='?',
        default='attach',
        choices=['attach', 'close', 'kill', 'status', 'refresh', 'run', 'prompt-collapse'],
        help='Command to execute (default: attach)'
    )
    
    parser.add_argument(
        'run_args',
        nargs='*',
        help='Arguments for the run command'
    )
    
    args = parser.parse_args()
    
    # Create session manager
    session = PanoramaSession()
    
    # Execute command
    if args.command in ['attach']:
        session.attach()
    elif args.command in ['close', 'kill']:
        session.close()
    elif args.command == 'status':
        session.status()
    elif args.command == 'refresh':
        session.refresh()
    elif args.command == 'run':
        if not args.run_args:
            print("Error: No command specified for 'run'")
            print("Usage: pano run <command>")
            print("Example: pano run 'git status'")
            sys.exit(1)
        # Join the run arguments into a single command
        command_to_run = ' '.join(args.run_args)
        session.run_command(command_to_run)
    elif args.command == 'prompt-collapse':
        session.prompt_collapse()


if __name__ == "__main__":
    main()